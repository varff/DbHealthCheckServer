// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: healths.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SmallHealthService_Check_FullMethodName = "/SmallHealthService/Check"
)

// SmallHealthServiceClient is the client API for SmallHealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmallHealthServiceClient interface {
	Check(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Health, error)
}

type smallHealthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmallHealthServiceClient(cc grpc.ClientConnInterface) SmallHealthServiceClient {
	return &smallHealthServiceClient{cc}
}

func (c *smallHealthServiceClient) Check(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, SmallHealthService_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmallHealthServiceServer is the server API for SmallHealthService service.
// All implementations must embed UnimplementedSmallHealthServiceServer
// for forward compatibility
type SmallHealthServiceServer interface {
	Check(context.Context, *emptypb.Empty) (*Health, error)
	mustEmbedUnimplementedSmallHealthServiceServer()
}

// UnimplementedSmallHealthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSmallHealthServiceServer struct {
}

func (UnimplementedSmallHealthServiceServer) Check(context.Context, *emptypb.Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedSmallHealthServiceServer) mustEmbedUnimplementedSmallHealthServiceServer() {}

// UnsafeSmallHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmallHealthServiceServer will
// result in compilation errors.
type UnsafeSmallHealthServiceServer interface {
	mustEmbedUnimplementedSmallHealthServiceServer()
}

func RegisterSmallHealthServiceServer(s grpc.ServiceRegistrar, srv SmallHealthServiceServer) {
	s.RegisterService(&SmallHealthService_ServiceDesc, srv)
}

func _SmallHealthService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmallHealthServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmallHealthService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmallHealthServiceServer).Check(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SmallHealthService_ServiceDesc is the grpc.ServiceDesc for SmallHealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmallHealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SmallHealthService",
	HandlerType: (*SmallHealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _SmallHealthService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healths.proto",
}
